name: Build and publish wheels

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      force_build:
        description: 'Force build wheels (manual trigger only)'
        type: boolean
        default: false

# Add permissions needed for creating releases
permissions:
  contents: write
  id-token: write

jobs:
  linux-x86_64:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.13"]  # TurboAPI requires Python 3.13+ free-threading
        manylinux: ["2_17"]
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev pkg-config
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: x86_64
          args: --release --out ../dist --strip --interpreter python3.13
          sccache: 'true'
          manylinux: ${{ matrix.manylinux }}
          working-directory: python
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.python-version }}-x86_64-${{ matrix.manylinux }}-${{ github.run_id }}
          path: dist

# ARM64 Linux builds removed due to Docker authorization issues

  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ["3.13"]  # TurboAPI requires Python 3.13+ free-threading
        target: [x64]
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.target }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out ../dist --strip --interpreter python3.13
          sccache: 'true'
          working-directory: python
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.python-version }}-${{ matrix.target }}-${{ github.run_id }}
          path: dist

  macos:
    runs-on: macos-latest
    strategy:
      matrix:
        python-version: ["3.13"]  # TurboAPI requires Python 3.13+ free-threading
        target: [x86_64, aarch64]
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out ../dist --strip --interpreter python3.13
          sccache: 'true'
          working-directory: python
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.python-version }}-${{ matrix.target }}-${{ github.run_id }}
          path: dist

  # Build source distribution
  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out ../dist
          working-directory: python
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: sdist-${{ github.run_id }}
          path: dist

  collect-wheels:
    name: Collect all wheels
    runs-on: ubuntu-latest
    needs: [linux-x86_64, windows, macos, build-sdist]
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: wheels-*${{ github.run_id }}
          path: all-wheels
          merge-multiple: true
      - uses: actions/download-artifact@v4
        with:
          name: sdist-${{ github.run_id }}
          path: all-wheels
      - name: Upload combined wheels
        uses: actions/upload-artifact@v4
        with:
          name: all-wheels-${{ github.run_id }}
          path: all-wheels

  # Test installation from wheels
  test-wheels:
    name: Test wheel installation
    needs: [collect-wheels]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.13']  # TurboAPI requires Python 3.13+ free-threading
      fail-fast: false
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: all-wheels-${{ github.run_id }}
          path: wheelhouse
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install and test wheel
        shell: bash
        run: |
          python -m pip install --upgrade pip
          # List available wheels for debugging
          echo "Available wheels:"
          ls -la wheelhouse/
          
          # Use Python to detect platform and select correct wheel
          python -c "
import sys
import platform
import os
import glob

print(f'Platform: {sys.platform}, Architecture: {platform.machine()}')
print(f'Python version: {sys.version_info.major}.{sys.version_info.minor}')

# List all available wheels
all_wheels = glob.glob('wheelhouse/*.whl')
print(f'Available wheels: {all_wheels}')

# Detect platform and build wheel pattern
py_ver = f'cp{sys.version_info.major}{sys.version_info.minor}'

if sys.platform.startswith('linux'):
    platform_tag = 'manylinux'
elif sys.platform == 'darwin':
    arch = platform.machine()
    platform_tag = f'macosx*{arch}'
elif sys.platform == 'win32':
    platform_tag = 'win_amd64'
else:
    platform_tag = '*'

# Build pattern: turboapi-VERSION-PYVER-PYVER-PLATFORM.whl
pattern = f'wheelhouse/turboapi-*-{py_ver}-{py_ver}-*{platform_tag}*.whl'
print(f'Wheel pattern: {pattern}')

# Find matching wheel
wheels = glob.glob(pattern)
print(f'Matching wheels: {wheels}')

if wheels:
    wheel = wheels[0]
    print(f'Installing: {wheel}')
    exit_code = os.system(f'pip install \"{wheel}\"')
    sys.exit(exit_code >> 8)
else:
    print('ERROR: No matching wheel found!')
    sys.exit(1)
          "
          
          # Test the installation
          python -c "
import sys
import os

# Set UTF-8 encoding on Windows
if sys.platform == 'win32':
    os.environ['PYTHONIOENCODING'] = 'utf-8'
    if hasattr(sys.stdout, 'reconfigure'):
        sys.stdout.reconfigure(encoding='utf-8')
        sys.stderr.reconfigure(encoding='utf-8')

try:
    import turboapi
    print('[OK] TurboAPI imported successfully')
    # Test basic functionality
    from turboapi import TurboAPI
    app = TurboAPI(title='Test', version='1.0.0')
    print('[OK] TurboAPI app created successfully')
    print('[OK] All tests passed!')
except Exception as e:
    print(f'[X] Test failed: {e}')
    import traceback
    traceback.print_exc()
    exit(1)
          "

  release:
    name: Release to PyPI
    runs-on: ubuntu-latest
    needs: [collect-wheels, test-wheels]
    # This conditional allows manual triggering without requiring the tag push
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/download-artifact@v4
        with:
          name: all-wheels-${{ github.run_id }}
          path: dist
      - name: List wheels
        run: ls -la dist/
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip_existing: true
          
      # Create GitHub Release for tagged versions
      - name: Extract version from tag
        if: startsWith(github.ref, 'refs/tags/v')
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
      - name: Generate Release Notes
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          git log --pretty=format:"* %s (%h)" $(git describe --tags --abbrev=0 HEAD^)..HEAD > release_notes.md || echo "* Initial release" > release_notes.md
          echo "## TurboAPI v${{ steps.get_version.outputs.VERSION }}" | cat - release_notes.md > temp && mv temp release_notes.md
          echo "" >> release_notes.md
          echo "## ðŸš€ Revolutionary Python Web Framework" >> release_notes.md
          echo "FastAPI-compatible syntax with 5-10x performance boost!" >> release_notes.md
          echo "" >> release_notes.md
          echo "## Artifacts" >> release_notes.md
          echo "This release includes wheels for:" >> release_notes.md
          echo "- Linux (x86_64, aarch64) - manylinux 2.17" >> release_notes.md
          echo "- macOS (x86_64, arm64)" >> release_notes.md
          echo "- Windows (x64)" >> release_notes.md
          echo "- **Python 3.13+ free-threading required**" >> release_notes.md
          echo "" >> release_notes.md
          echo "### Installation" >> release_notes.md
          echo '```bash' >> release_notes.md
          echo "pip install turboapi==${{ steps.get_version.outputs.VERSION }}" >> release_notes.md
          echo '```' >> release_notes.md
          echo "" >> release_notes.md
          echo "**No Rust compiler required!** ðŸŽŠ" >> release_notes.md
          echo "" >> release_notes.md
          echo "### Performance" >> release_notes.md
          echo "- ðŸš€ 5-10x faster than FastAPI" >> release_notes.md
          echo "- ðŸ§µ True parallelism with Python 3.13 free-threading" >> release_notes.md
          echo "- âš¡ Zero Python middleware overhead" >> release_notes.md
          echo "- ðŸ¦€ Rust-powered HTTP core" >> release_notes.md
      
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          body_path: release_notes.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
